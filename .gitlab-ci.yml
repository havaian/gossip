stages:
  - deploy

deploy:
  stage: deploy
  tags:
    - shell
  variables:
    PROJECT_DIR: "/home/root/projects/gossip-mun-uz"
    GIT_STRATEGY: fetch  # Prevent automatic checkout
  script:
    - echo "Starting deployment..."
    - |
      if [ ! -d "$PROJECT_DIR" ]; then
        echo "Directory $PROJECT_DIR does not exist, creating..."
        mkdir -p "$PROJECT_DIR"
        cd "$PROJECT_DIR"
        echo "Initializing git repository..."
        git init
        git remote add origin https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_REMOTE_URL}
      else
        cd "$PROJECT_DIR"
        # Check if it's a git repository, if not initialize it
        if [ ! -d ".git" ]; then
          echo "Initializing git repository..."
          git init
          git remote add origin https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_REMOTE_URL}
        else
          # Update remote URL with the token
          git remote set-url origin https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_REMOTE_URL}
        fi
      fi
    - echo "✅ Pulling latest changes..."
    - git fetch --all || { echo "❌ Git fetch failed"; exit 1; }
    - git reset --hard origin/main || { echo "❌ Git reset failed"; exit 1; }
    - git pull origin main || { echo "❌ Git pull failed"; exit 1; }
    - echo "✅ Executing deployment script..."
    # Run the deploy script
    - chmod +x deploy.sh
    - ./deploy.sh
  after_script:
    # Reset remote URL to prevent token exposure, but check if .git exists first
    - |
      if [ -d "$PROJECT_DIR/.git" ]; then
        cd $PROJECT_DIR && git remote set-url origin https://${GITLAB_REMOTE_URL}
      fi
  only:
    - main